name: 'Terraform'

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      REGISTRY: "magaum/asp-pdz-ecs"
    defaults:
      run:
        shell: bash
        working-directory: ./ecs
    steps:
      - uses: actions/checkout@v2
      - name: Dockerhub Login
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          logout: true
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Build and push
        uses: docker/build-push-action@v2.6.1
        with:
          file: "./Dockerfile"
          push: true
          tags: "magaum/asp-pdz-ecs:latest"
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
            
  lambda:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        working-directory: ./lambda
        
    steps:
      - uses: actions/checkout@v2
      
      - name: use node 12
        uses: actions/cache@v2
        with:
          node-version: '12'
          path: '~/.npm'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: install dependencies
        run: npm ci

      - name: test
        run: npm test
      
      - uses: montudor/action-zip@v1
        with:
          args: zip -qq -r lambda.zip . -x "test*" "coverage*"
      
      - uses: actions/upload-artifact@v2
        with:
          name: lambda.zip
          path: lambda.zip

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: development
    needs: [lambda, docker]
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infra

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
      
    - uses: actions/download-artifact@v2
      with:
        name: lambda.zip
        path: infra

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}
     
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve
